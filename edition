#include "graphics.h"
#include "extgraph.h"
#include "genlib.h"
#include "simpio.h"
#include "conio.h"
#include <stdio.h>
#include <stdlib.h>
#include <stddef.h>

#include <windows.h>
#include <olectl.h>
#include <mmsystem.h>
#include <wingdi.h>
#include <ole2.h>
#include <ocidl.h>
#include <winuser.h>

#define LENGTH 0.66
#define WIDTH 0.66
#define LENG 2.0
#define WID  1.0
#define RW 10.27//右边颜料盘位置
#define PI 3.141593


#define LINE 0
#define ARROW 1
#define RECTANGLE 2
#define ROUNDEDREC 3
#define RHOMBUS 4
#define ELLIPSE 5
#define TEXT 6

#define DIMENTION 2


typedef struct shape{
    int x1,y1;//top left
    int x2,y2;//top right
    int x3,y3;// bottom left
    int x4,y4;// bottom right

    int type;
	double angle;
	double veryAngle;//绝对角度 
	char *text;
	bool isSleted;
	struct shape *next;
}SP;/*数据结构 
TYPE=0 //画直线 
TYPE=1;  //画带箭头直线
TYPE=2;  //矩形
TYPE=3;  //圆角矩形
TYPE=4;  //菱形
TYPE=5;  //椭圆
TYPE=6;  //文字*/
int size=sizeof(SP);
int deleteparameter;
SP *p,*head,*tail;//链表
SP *delet;





int cx,cy;
int flag;
double mx,my;
int TYPE; 
void KeyboardEventProcess(int key,int event);
void CharEventProcess(char c);
void MouseEventProcess(int x,int y,int button,int event);
void DrawBox_init(double x,double y,char str1[],char str2[]);
void DrawBox_init1(double x,double y,char str1[],char str2[]);


//盖同学画图函数 
void DrawRoundedRec(double x1, double y1, double x2, double y2, double x3, double y3, double x4, double y4);
void DrawCircle(x, y);
void DrawRec(double x1, double y1, double x2, double y2, double x3, double y3, double x4, double y4);
void DrawEllipse(double x1, double y1, double x2, double y2, double x3, double y3, double x4, double y4); 
double CalcAngle(double x0, double y0, double x1, double y1, double x2, double y2);
double CalcDistance(double x1, double y1, double x2, double y2);
SP* rotate(SP* p);
void DrawGraphic(SP* p); 

void init();//画界面 
SP * InsertDoc(SP* head, SP*stud);/* 插入 */
SP * DeleteDoc(SP* head, int num); /* 删除 */
void travel(SP* p);//用于遍历链表画全部结点的图形 
void traveldelete(SP* p); //用于遍历链表画全部结点的图形 
SP *travelfindselect(SP* p);//用于找到并返回目前选中的图形的上一个结点，为删除做准备 






void Main()
{
InitConsole();
double chang,kuan;
printf("请输入生成窗口长宽：\n（建议输入 11 7）\n");//自定义窗口大小 
scanf("%lf%lf",&chang,&kuan);
SetWindowSize(chang, kuan);
SetWindowTitle("Flow Chart Drawing");
InitGraphics(); //初始化窗口
FreeConsole();

	
	cx=GetWindowWidth();
	cy=GetWindowHeight();
	init();//初始化画布 
	
	SetPenSize(1);//初始设置笔的大小为1 
	registerKeyboardEvent(KeyboardEventProcess);//键盘响应 
	registerCharEvent(CharEventProcess);//字符响应 
	registerMouseEvent(MouseEventProcess);//鼠标响应 
	head=tail=NULL;
}


SP *travelfindselect(SP* p)//用于找到并返回目前选中的图形的上一个结点，为删除做准备 
{
	SP* ptr;SP* null=NULL;
	if(p== NULL)
        return null;
    else if(p->isSleted){
    	deleteparameter=1;
    	return p;
	}
    else  {
    	 for(ptr =p; ptr->next!=NULL; ptr = ptr->next)
         if((ptr->next).isSleted) return ptr;
         return null;
	}	
} 



void travel(SP* p)//用于遍历链表画全部结点的图形 
{
	SP* ptr;
	if(p== NULL)
        return;
    else{
    	 for(ptr =p; ptr->next!=NULL; ptr = ptr->next)
        DrawGraphic(ptr);
	}
	 DrawGraphic(ptr);
}








void traveldelete(SP* p)//删除整个链表 
{
	SP *ptr1,*ptr2;
		ptr1=p;
	while(ptr1->next){
		ptr2=ptr1->next;
		free(ptr1);
		ptr1=ptr2;
	}
	free(ptr2);
}







void MouseEventProcess(int x,int y,int button,int event)
{
	mx=ScaleXInches(x);
	my=ScaleYInches(y);//将得到的像素点坐标转换为英寸 
	double x1,y1,x3,y3;
	static bool isDraw=FALSE;//判断是否要画 
	switch (event){
		case BUTTON_DOWN://按键按下 
			if(button == LEFT_BUTTON)//鼠标左键的情况 
			{
				if(mx>=RW&&mx<=RW+LENGTH&&my>cy-WIDTH&&my<=cy-WIDTH+length) {SetPenColor("Red");flag=1;}
				else if(mx>=RW&&mx<=RW+LENGTH&&my>cy-WIDTH-LENGTH&&my<=cy-WIDTH) {SetPenColor("Orange");flag=2;}
				else if(mx>=RW&&mx<=RW+LENGTH&&my>cy-WIDTH-2*LENGTH&&my<=cy-WIDTH-LENGTH) {SetPenColor("Yellow");flag=3;}
				else if(mx>=RW&&mx<=RW+LENGTH&&my>cy-WIDTH-3*LENGTH&&my<=cy-WIDTH-2*LENGTH) {SetPenColor("Green");flag=4;}
				else if(mx>=RW&&mx<=RW+LENGTH&&my>cy-WIDTH-4*LENGTH&&my<=cy-WIDTH-3*LENGTH) {SetPenColor("Blue");flag=5;}
				else if(mx>=RW&&mx<=RW+LENGTH&&my>cy-WIDTH-5*LENGTH&&my<=cy-WIDTH-4*LENGTH) {SetPenColor("Violet");flag=6;}
				else if(mx>=RW&&mx<=RW+LENGTH&&my>cy-WIDTH-6*LENGTH&&my<=cy-WIDTH-5*LENGTH) {SetPenColor("Magenta");flag=7;}
				else if(mx>=RW&&mx<=RW+LENGTH&&my>cy-WIDTH-7*LENGTH&&my<=cy-WIDTH-6*LENGTH) {SetPenColor("Cyan");flag=8;}
				else if(mx>=RW&&mx<=RW+LENGTH&&my>cy-WIDTH-8*LENGTH&&my<=cy-WIDTH-7*LENGTH) {SetPenColor("White");flag=9;}
				else if(mx>=RW&&mx<=RW+LENGTH&&my>cy-WIDTH-9*LENGTH&&my<=cy-WIDTH-8*LENGTH) {SetPenColor("Black");flag=0;}
				//对应区域改变画笔颜色并做了记录 
				
				else if(mx>=0&&mx<=RW+LENGTH&&my>cy-WIDTH&&my<=cy-WIDTH+LENGTH) { TYPE=0;   }//画直线 
				else if(mx>=0&&mx<=LENGTH&&my>cy-WIDTH-LENGTH&&my<=cy-WIDTH) { TYPE=1;  }//画带箭头直线
				else if(mx>=0&&mx<=LENGTH&&my>cy-WIDTH-2*LENGTH&&my<=cy-WIDTH-LENGTH) { TYPE=2;   }//矩形
				else if(mx>=0&&mx<=LENGTH&&my>cy-WIDTH-3*LENGTH&&my<=cy-WIDTH-2*LENGTH) { TYPE=3;     }//圆角矩形
				else if(mx>=0&&mx<=LENGTH&&my>cy-WIDTH-4*LENGTH&&my<=cy-WIDTH-3*LENGTH) {  TYPE=4;   }//菱形
				else if(mx>=0&&mx<=LENGTH&&my>cy-WIDTH-5*LENGTH&&my<=cy-WIDTH-4*LENGTH) {  TYPE=5;  }//椭圆
				else if(mx>=0&&mx<=LENGTH&&my>cy-WIDTH-6*LENGTH&&my<=cy-WIDTH-5*LENGTH) {  TYPE=6;   }//文字
				else if(mx>=0&&mx<=LENGTH&&my>cy-WIDTH-7*LENGTH&&my<=cy-WIDTH-6*LENGTH) {MyDisplayClear();init();traveldelete(head);p=head=tail=NULL;}//实现清屏 
				else {
					x1=mx;y1=my;
						p=(SP*) malloc(size);
						p->x1=x1;p->y1=y1;
						p->x4=x1;p->y2=y1;	
						p->type=TYPE;
					}
				} //这里写根据当前要画的图形模式进行绘制的代码！！！！！！！！！！！！！！！
								
			
			else if(button == RIGHT_BUTTON)
			{
				
				
			}//右键按下 
			break;
		case BUTTON_DOUBLECLICK:
			break;
		case BUTTON_UP:
			if(button==LEFT_BUTTON) 
			{
			x3=mx;y3=my;
			p->x3=x3;p->y3=y3;
			p->y4=y3;p->x2=x3;
			p->angle=0;	
			p->veryAngle=0;
			p->text=NULL;
        	p->isSleted=0;
        	p->next=NULL;
			if(head == NULL) head = p;
            else  tail->next = p;
            tail = p;					
			}//抬起左键 
			else if(button==RIGHT_BUTTON) {
				
				
			}//抬起右键 
			break;
		case MOUSEMOVE:
			if(isDraw)
			{
				
			}//鼠标移动 
	
		break;
	}
}











void KeyboardEventProcess(int key,int event)
{
	switch(event){
		case KEY_DOWN : 
			switch(key){
             case VK_BACK:{//选中某图形并按下删除键，可以删除图形结点 
             	delet=travelfindselect(head);
             	if(delet){
             		if(deleteparameter)//选中的是第一个图形 
					 {
             		deleteparameter=0；
					 head=head->next	
					 }    
				    else{
				    SP *todelete;
             		if(delet->next)//p不是开头的结点 
                    todelete= delet->next;                /*s指向p所指的下一个结点  */
                    delet->next = todelete->next;     /*从链表中删除*/
                    free(todelete);   
					} }
			
			 }break;
			}
		break;
		case KEY_UP : break;
		}	
		 
	
}




void CharEventProcess(char c)
{
	
	
	
} 







void DrawT_init(double x,double y)//初始化界面写清屏字样 
{
	SetPenSize(1);
	MovePen(x,y);
	DrawTextString("清屏");
}







void DrawL_init()//画工具栏 
{
	SetPenSize(3);
	//画直线和带箭头直线 
	MovePen(LENGTH/4,my-WIDTH+0.25*LENGTH);
	DrawLine(0.5*LENGTH,0.5*LENGTH);
	MovePen(LENGTH/4,my-WIDTH-0.75*LENGTH);
	DrawLine(0.5*LENGTH,0.5*LENGTH);
	MovePen(LENGTH*3/4,my-WIDTH-0.25*LENGTH);
	DrawLine(-0.125*LENGTH,0);
	MovePen(LENGTH*3/4,my-WIDTH-0.25*LENGTH);
	DrawLine(0,-0.125*LENGTH);
	
	//画“T ” 
	MovePen(LENGTH/4,my-WIDTH-5.3*LENGTH);
	DrawLine(0.5*LENGTH,0);
	MovePen(LENGTH/2,my-WIDTH-5.3*LENGTH);
	DrawLine(0,-0.5*LENGTH);
	
	//画矩形
	MovePen(LENGTH/7,my-WIDTH-1.75*LENGTH);
	DrawLine(0.7*LENGTH,0);
	DrawLine(0,0.5*LENGTH);
	DrawLine(-0.7*LENGTH,0);
	DrawLine(0,-0.5*LENGTH);
	
	//画圆角矩形 
	MovePen(LENGTH/7,my-WIDTH-2.5*LENGTH);
	DrawLine(0,LENGTH/6);
	DrawArc(LENGTH/8, 180, -90);
	DrawLine(0.5*LENGTH,0);
	DrawArc(LENGTH/8, 90, -90);
	DrawLine(0,-LENGTH/3);
	DrawArc(LENGTH/8, 0, -90);
	DrawLine(-0.5*LENGTH,0);
	DrawArc(LENGTH/8, 270, -90);
	DrawLine(0,LENGTH/6);
	
	//画菱形
	MovePen(LENGTH/7,my-WIDTH-3.5*LENGTH);
	DrawLine(0.35*LENGTH,0.2*LENGTH);
	DrawLine(0.35*LENGTH,-0.2*LENGTH);
	DrawLine(-0.35*LENGTH,-0.2*LENGTH);
	DrawLine(-0.35*LENGTH,0.2*LENGTH);
	
	//画圆 
	MovePen(LENGTH*5/6,my-WIDTH-4.5*LENGTH);
	DrawArc(LENGTH/3, 0, 360);
}











void DrawBox_init(double x,double y,char str1[],char str2[])//初始化时画调色盘所用函数
{
	
	StartFilledRegion(1);
	SetPenColor(str1);
	MovePen(x,y);
	DrawLine(0,LENGTH);
	DrawLine(LENGTH,0);
	DrawLine(0,-LENGTH);
	DrawLine(-LENGTH,0);
	EndFilledRegion();

	StartFilledRegion(1);
	SetPenColor(str2);
	MovePen(x,y);
	DrawLine(0,-LENGTH);
	DrawLine(LENGTH,0);
	DrawLine(0,LENGTH);
	DrawLine(-LENGTH,0);
	EndFilledRegion();

} 







void DrawBox_init1(double x,double y,char str1[],char str2[])//初始化时画工具栏所用函数
{
	SetPenSize(1);
	SetPenColor(str1);
	MovePen(x,y);
	DrawLine(0,LENGTH);
	DrawLine(LENGTH,0);
	DrawLine(0,-LENGTH);
	DrawLine(-LENGTH,0);

	SetPenColor(str2);
	MovePen(x,y);
	DrawLine(0,-LENGTH);
	DrawLine(LENGTH,0);
	DrawLine(0,LENGTH);
	DrawLine(-LENGTH,0);
} 











void init()
{
	mx=ScaleXInches(cx);
	my=ScaleYInches(cy);
    DrawBox_init(RW,my-WIDTH,"Red","Orange");
	DrawBox_init(RW,my-WIDTH-2*LENGTH,"Yellow","Green");
	DrawBox_init(RW,my-WIDTH-4*LENGTH,"Blue","Violet");
	DrawBox_init(RW,my-WIDTH-6*LENGTH,"Magenta","Cyan");
	DrawBox_init(RW,my-WIDTH-8*LENGTH,"White","Black");
	
	DrawBox_init1(0,my-WIDTH,"Black","Black");
	DrawBox_init1(0,my-WIDTH-2*LENGTH,"Black","Black");
	DrawBox_init1(0,my-WIDTH-4*LENGTH,"Black","Black");
	DrawBox_init1(0,my-WIDTH-6*LENGTH,"Black","Black");
	
	DrawT_init(LENGTH/4,my-WIDTH-6.6*LENGTH); //写清除字样 
    DrawL_init();
}//初始化图形界面 

















//盖同学图形函数 
void DrawGraphic(SP* p){
	double x1, y1, x2, y2, x3, y3, x4, y4;
	x1 = p->x1;
	x2 = p->x2;
	x3 = p->x3;
	x4 = p->x4;
	y1 = p->y1;
	y2 = p->y2;
	y3 = p->y3;
	y4 = p->y4;
	if(p->angle!=0)p = SP* rotate(p);
	switch(p->type)
	{
		case line:
			MovePen(x1, y1);
			DrawLine(x3-x1, y3-y1);
			break;
		case arrow:
		    DrawArrow(x1, y1, x3, y3);
		    break;
		case rectangle:
		    DrawRec(x1, y1, x2, y2, x3, y3, x4, y4);
			break;
		case roundedRec:
			DrawRoundedRec(x1, y1, x2, y2, x3, y3, x4, y4);
			break;
		case rhombus:
			DrawRhombus(x1, y1, x2, y2, x3, y3, x4, y4);
			break;
		case ellipse:
			DrawEllipse(x1, y1, x2, y2, x3, y3, x4, y4);
			break;
		case text:
			PrintText(x1, y1, x2, y2, x3, y3, x4, y4,p->text);
			break;
		 
	}
} 
void DrawArrow(double x1, double y1, double x2, double y2)
{
	double LENGTH = CalcDistance(x1, y1, x2, y2);
	double arrowhead = LENGTH/8;
	double angle = CalcAngle(x1, y1, x1+1, y1, x2, y2);
	MovePen(x1, y1);
	DrawLine(x2-x1, y2-y1);
	DrawLine(-arrowhead*cos(angle+PI/4), arrowhead*sin(angle+PI/4));
	MovePen(x2, y2);
	DrawLine(-arrowhead*cos(angle-PI/4), arrowhead*sin(angle-PI*4));
}
void DrawRec(double x1, double y1, double x2, double y2, double x3, double y3, double x4, double y4)
{
	double angle;
	SetPenSize(2);
	MovePen(x1, y1);
	DrawLine(x2-x1, y2-y1);
	DrawLine(x3-x2, y3-y2);
	DrawLine(x4-x3, y4-y3);
	DrawLine(x1-x4, y1-y4);
	
}
// Draw a rectangle, x1y1 x2y2 x3y3 x4y4 are in clockwise order
void DrawRoundRec(double x1, double y1, double x2, double y2, double x3, double y3, double x4, double y4)
{   double angle, Angle, dx1, dx2, dy1, dy2, l1, l2, rcos, rsin;
    double r = 0.5;
    dx1 = fabs(x2 - x1);
	dx2 = fabs(x4 - x1);
	dy1 = fabs(y2 - y1);
	dy2 = fabs(y4 - y1);
	l1 = sqrt(dx1*dx1 + dy1*dy1);
	l2 = sqrt(dx2*dx2 + dy2*dy2);
	while(r>(l1/4) || r>(l2/4))r/=2;
	angle = CalcAngle(x1, y1, x1+1, y1, x2, y2);
	Angle = angle*180/PI;
	rcos = r*cos(angle);
	rsin = r*sin(angle);
	SetPenSize(2);
	MovePen(x1, y1);
	DrawArc(r, Angle+180, -90);
	DrawLine(x2-x1, y2-y1);
    DrawArc(r, Angle+90, -90);
    DrawLine(x3-x2, y3-y2);
    DrawArc(r, Angle, -90);
    DrawLine(x4-x3,y4-y3);
    DrawArc(r, Angle-90, -90);
    DrawLine(x1-x4, y1-y4);
}
// Draw a rounded rectangle, x1y1 x2y2 x3y3 x4y4 are in clockwise order
void DrawRhombus(double x1, double y1, double x2, double y2, double x3, double y3, double x4, double y4)
{
	double x01, y01, x02, y02, x03, y03, x04, y04;
	x01 = (x1+x2)/2;
	y01 = (y1+y2)/2;
	x02 = (x2+x3)/2;
	y02 = (y2+y3)/2;
	x03 = (x3+x4)/2;
	y03 = (y3+y4)/2;
	x04 = (x4+x1)/2;
	y04 = (y4+y1)/2;
	DrawRec(x01, y01, x02, y02, x03, y03, x04, y04);
}
void DrawEllipse(double x1, double y1, double x2, double y2, double x3, double y3, double x4, double y4)
{
	double x0, y0, l1, l2;
	l1 = CalcDistance(x1, y1, x2, y2);
	l2 = CalcDistance(x1, y1, x4, y4);
	x0 = (x1+x2+x3+x4)/4;
	y0 = (y1+y2+y3+y4)/4;
	MovePen(x0, y0;) 
	DrawEllipticalArc(l1, l2, 0, 360);
}
void PrintText(double x1, double y1, double x2, double y2, double x3, double y3, double x4, double y4, char *text)
{
	MovePen(x1, (y1+y4/2));
	DrawTextString(text); 
}
double CalcAngle(double x0, double y0, double x1, double y1, double x2, double y2)
{
	double l1, l2, angle;
    l1 = CalcDistance(x0, y0, x1, y1);
    l2 = CalcDistance(x0, y0, x2, y2);
	angle = acos((dx1*dx2 + dy1*dy2)/(l1*l2));
	return angle;
}
// Calculate the angle between x0y0 x1y1  and x0y0 x2y2;
double CalcDistance(double x1, double y1, double x2, double y2)
{
	double dx, dy, lxy
    dx = x2 - x1;
    dy = y2 - y1;
    lxy = sqrt(dx*dx + dy*dy);
    return lxy;
 } 
 //Calculate the distance between x1y1 and x2y2.

SP* rotate(SP* p)
 {
 	double x1, y1, x2, y2, x3, y3, x4, y4, angle;
 	double x02, y02, x03, y03, x04, y04;
 	double dx2, dx3, dx4, dy2, dy3, dy4, dx02, dx03, dx04, dy02, dy03, dy04;
 	x1 = p->x1;
 	y1 = p->y1;
 	x2 = p->x2;
 	y2 = p->y2;
 	x3 = p->x3;
 	x4 = p->x4;
 	y3 = p->y3;
 	y4 = p->y4;
 	s1 = (SP*)malloc(sizeof(SP));
 	dx2 = x2 - x1;
	dy2 = y2 - y1;
	dx02 = dx2*cos(angle) + dy2*sin(angle);
	dy02 = -dx2*sin(angle) + dy2*cos(angle);
	s1.x2 = x1 + dx02;
	s1.y2 = y1 + dy02;
	
	dx3 = x3 - x1;
	dy3 = y3 - y1;
	dx03 = dx3*cos(angle) + dy3*sin(angle);
	dy03 = -dx3*sin(angle) + dy3*cos(angle);
	s1.x3 = x1 + dx03;
	s1.y3 = y1 + dy03;
	
	dx4 = x4 - x1;
	dy4 = y4 - y1;
	dx04 = dx4*cos(angle) + dy4*sin(angle);
	dy04 = -dx4*sin(angle) + dy4*cos(angle);
	s1.x4 = x1 + dx04;
	s1.y4 = y1 + dy04;
	
	s1->veryAngle += s1->angle;
	s1->angle = 0;
	s1->isSleted = p->isSleted;
	s1->text = p->text;
	
	return &s1;
	} 
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	//林同学部分 	
	double nrotate(double &source[DIMENTION][DIMENTION], double angle)
{
	double matrix[DIMENTION][DIMENTION] = { 0 };
	generatePotateMatrix(matrix, angle);

}
double generatePotateMatrix(double &matrix[DIMENTION][DIMENTION], double angle)
{
	matrix[0][0] = cos(angle);
	matrix[0][1] = -sin(angle);
	matrix[1][0] = sin(angle);
	matrix[1][1] = cos(angle);
}

double matrixMultiple(double a[DIMENTION][DIMENTION], double b[DIMENTION][DIMENTION], double &(res)[DIMENTION][DIMENTION]) {
	int i, j, k;
	for (i = 0; i < DIMENTION; i++) {
		for (j = 0; j < DIMENTION; j++) {
			res[i][j] = 0;
			for (k = 0; k < DIMENTION; k++) {
				res[i][j] += a[i][k] + a[k][j];
			}
		}
	}
}

//here vector is defined so that the starting & ending point matters
//it contains more info, thus easier to be managed by customers
class  Vec
{
public:
	 Vec(double nx1=0, double ny1=0, double nx2=0, double ny2=0);
	~ Vec();
	//the angle of two vec
	friend double operator%(const Vec&a, const Vec&b);
	//inner Product
	friend double operator*(const Vec&a, const Vec&b);
	//scale the vectors
	void operator*=(double a) {
		x1 = x2 + (x1 - x2)*a;
		y1 = y2 + (y1 - y2)*a;
	}
	//it won't change the starting point
	//it will regard vec a as a normal vector(without defining starting points), and add to left-handed vec
	void operator+=(const Vec&a) {
		this->x1 = this->x1 + a.x1 - a.x2;
		this->y1 = this->y1 + a.y1 - a.y2;
	}
	void update(double nx1, double ny1, double nx2 = 0, double ny2 = 0);
	//redirect the ending point to a new place
	//vector's direction & LENGTH is subject to be changed
	void redirect(double nx1, double ny1);
	//the vector is rotated and saved in vec a
	void rotate(const Vec&a, double angle);
	//change the starting point of vector without change it's direction & LENGTH
	void moveStart(double x, double y);
	//the middle vector, which is half the LENGTH of the sum of two vectors
	//for vectors not stating from the origin, the starting point will be the middle of two vectors' starting points
	void getMiddle(const Vec&a, Vec&b);
	//the LENGTH of this vec's projection on a
	double projecton(const Vec&a);
	//use polar coodination to define a vector
	void polar(double rho, double phi, double x = 0, double y = 0);
	//it will change the vector itself instead of generate a new vector;
	void normalize();
	//the angle of vector and x-axis
	double alpha();
	//get the LENGTH of the vector
	double len() { return sqrt((x1 - x2)*(x1 - x2) + (y1 - y2)*(y1 - y2)); }
	double getx1() { return x1; }
	double getx2() { return x2; }
	double gety1() { return y1; }
	double gety2() { return y2; }
private:
	double x1, y1;//end
	double x2, y2;//start
};

 Vec:: Vec(double nx1, double ny1, double nx2, double ny2)
{
	 x1 = nx1;
	 y1 = ny1;
	 x2 = nx2;
	 y2 = ny2;
}

 Vec::~ Vec()
{
}

 double operator%(const Vec&a, const Vec&b) {
	 double v1x = a.x1 - a.x2;
	 double v1y = a.y1 - a.y2;
	 double v2x = b.x1 - b.x2;
	 double v2y = b.y1 - b.y2;
	 return acos((v1x*v2x + v1y * v2y) / (sqrt(v1x*v1x + v1y * v1y)*sqrt(v2x*v2x + v2y * v2y)));
 }
 double operator*(const Vec&a, const Vec&b) {
	 double v1x = a.x1 - a.x2;
	 double v1y = a.y1 - a.y2;
	 double v2x = b.x1 - b.x2;
	 double v2y = b.y1 - b.y2;
	 return (v1x*v2x + v1y * v2y);
 }

 void Vec::update(double nx1, double ny1, double nx2, double ny2)
 {
	 x1 = nx1;
	 y1 = ny1;
	 x2 = nx2;
	 y2 = ny2;
 }

 void Vec::redirect(double nx1, double ny1) {
	 x1 = nx1;
	 y1 = ny1;
 }

 void Vec::rotate(Vec&a, double angle) {
	 x = this->x1 - this->x2;
	 y = this->y1 - this->y2;
	 a.x1 = x * cos(angle) - y * sin(angle);
	 a.y1 = x * sin(angle) + y * sin(angle);
	 a.x2 = this->x2;
	 a.y2 = this->y2;
 }

 void Vec::moveStart(double x, double y) {
	 x1 = x1 - x2 + x;
	 y1 = y1 - y2 + y;
	 x2 = x;
	 y2 = y;
 };

 void Vec::getMiddle(const Vec&a, Vec&b) {
	 x1 = (a.x1 + b.x1) / 2;
	 y1 = (a.y1 + b.y1) / 2;
	 x2 = (a.x2 + b.x2) / 2;
	 y2 = (a.y2 + b.y2) / 2;
 }

 double Vec::projecton(const Vec&a) {
	 double v1x = a.x1 - a.x2;
	 double v1y = a.y1 - a.y2;
	 double v2x = x1 - x2;
	 double v2y = y1 - y2;
	 return (v1x*v2x + v1y * v2y) / sqrt(v2x*v2x + v2y * v2y);
 }

 void Vec::polar(double rho, double phi, double x, double y) {
	 x1 = x + rho * cos(phi);
	 y1 = y + rho * sin(phi);
	 x2 = x;
	 y2 = y;
 }

 void Vec::normalize() {
	 double vx = x1 - x2;
	 double vy = x2 - y2;
	 double len = sqrt(vx*vx + vy * vy);
	x1 = x2 + vx / len;
	y1 = y2 + vy / len;
 }

 double Vec::alpha() {
	 return atan((y1-y2)/(x1-x2))
 }


#define PADDING 1
typedef bool BOOL;
class Box {
public:
	Box();
	//update anchors
	//x & y is the mouse position
	//ifNew true: a new anchor is set   
	//false: it will update anchor according to mouse position and which of the anchor is selected
	void update(SP* p, double x=0, double y=0);
	//cancel selection
	void cancel();
	//check if it is one of the anchors
	BOOL check(double x, double y);
	//确定选中的容错范围
	void setGap(double x) {
		gap = x;
	}
	void setRadius(double x) {
		r = x;
	}
	void draw();
protected:
	void rotateVetor(double x, double y, double angle, double *mx, double *my) {
		*mx = x * cos(angle) - y * sin(angle);
		*my = x * sin(angle) + y * sin(angle);
	}
private:
	Vec pos[4] = {Vec(), Vec(), Vec(), Vec() };//anchors
	static Vec v[4] = { Vec(-PADDING, PADDING), 
						Vec( PADDING, PADDING ),
						Vec(-PADDING, -PADDING),
						Vec( PADDING, -PADDING ) };
	double gap;
	int select;
	Vec top;
	Vec center;
	double r;
};

Box::Box() {
	select = -1;
	gap = 0.1;
	r = 0.2;
}

void Box::update(SP* p, double x, double y) {
	int i;
	if (select<0) {
		v[0].moveStart(p->x1, p->y1);
		v[1].moveStart(p->x2, p->y2);
		v[2].moveStart(p->x3, p->y3);
		v[3].moveStart(p->x4, p->y4);
		for (i = 0; i < 4; i++) {
			v[i].rotate(pos[i], p->absoluteAngle);
		}/*
		pos[0][0] = p->x1 + pos[0][0];
		pos[1][0] = p->x2 + pos[1][0];
		pos[2][0] = p->x3 + pos[2][0];
		pos[3][0] = p->x4 + pos[3][0];
		pos[0][1] += p->y1;
		pos[1][1] += p->y2;
		pos[2][1] += p->y3;
		pos[3][1] += p->y4;*/
		top.getMiddle(pos[0], pos[1]);
		//top.update((pos[0][0] + pos[1][0]) / 2, (pos[0][1] + pos[1][1]) / 2, (p->x1 + p->x2) / 2, (p->y1 + p->y2) / 2);
		center.update(0, 0, (p->x1 + p->x4) / 2, (p->y1 + p->y4) / 2);
	}
	else {
		if (selet == 4) {
			center.redirect(x, y);
			double theta = center % top;//the angle of two vectors
			p->angle = theta;
			p->absoluteAngle += theta;
			for (i = 0; i < 4; i++) {
				v[i].rotate(pos[i], p->absoluteAngle);
			}
		} 
		else
		{
			Vec a;// y,  clockwise
			Vec b;// x, anti-clockwise
			Vec c(pos[select]);
			double dx, dy;
			c.normalize();
			c.rotate(a, (45.0 / 180)*PI);//y 
			c.rotate(b, -(45.0 / 180)*PI);//x
			c.redirect(x, y);
			c.polar(c.len() - sqrt(2 * PADDING*PADDING), c.alpha(), c.getx2(), c.gety2());
			pos[select] += c;
			dx = c.projecton(b);
			dy = c.projecton(a);
			b *= dx;
			a *= dy;
			if (select == 0) {
				x1 = c.getx1;
				y1 = c.gety1;
				a.moveStart(p->x2, p->y2);
				p->x2 = a.getx1();
				p->y2 = a.gety1();
				pos[1] += a;
				b.moveStart(p->x3, p->y3);
				p->x3 = b.getx1();
				p->y3 = b.gety1();
				pos[2] += b;
			}
			else if (select == 1) {
				x2 = c.getx1;
				y2 = c.gety1;
				a.moveStart(p->x4, p->y4);
				p->x4 = a.getx1();
				p->y4 = a.gety1();
				pos[3] += a;
				b.moveStart(p->x1, p->y1);
				p->x1 = b.getx1();
				p->y1 = b.gety1();
				pos[0] += b;
			}
			else if (select == 2) {
				x3 = c.getx1;
				y3 = c.gety1;
				a.moveStart(p->x1, p->y1);
				p->x1 = a.getx1();
				p->y1 = a.gety1();
				pos[0] += a;
				b.moveStart(p->x4, p->y4);
				p->x4 = b.getx1();
				p->y4 = b.gety1();
				pos[3] += b;
			}
			else if (select == 3) {
				x4 = c.getx1;
				y4 = c.gety1;
				a.moveStart(p->x3, p->y3);
				p->x3 = a.getx1();
				p->y3 = a.gety1();
				pos[2] += a;
				b.moveStart(p->x2, p->y2);
				p->x2 = b.getx1();
				p->y2 = b.gety1();
				pos[1] += b;
			}
		}
	}
}

BOOL Box::check(double x, double y) {
	int i, j;
	if (select < 0) {
		return false;
	}
	if ((x > top[0].getx1() + gap && x < top[0].getx1() - gap) && (y > top[0].gety1() + gap && y < top[0].gety1() - gap)) {
		select = 4;
	}
	for (int i = 0; i < 4; i++) {
		if ((x > pos[i].getx1() + gap && x < pos[i].getx1() - gap) && (y > pos[i].gety1() + gap && y < pos[i].gety1() - gap)) {
			select = i;
			return true;
		}
	}
	return false;
}

void Box::cancel() {
	SetEraseMode(true);
	draw();
	selet = -1;
	SetEraseMode(false);
}

void Box::draw() {
	DrawRec(pos[0].getx1(), pos[0].gety1(), pos[1].getx1(), pos[1].gety1(), pos[2].getx1(), pos[2].gety1(), pos[3].getx1(), pos[3].gety1());
	MovePen(pos[1][0], pos[1][1]);
	DrawLine(pos[0].getx1() - pos[1].getx1, pos[0].gety1() - pos[1].gety1());
	DrawArc(r, 0, 360);
	for (int i = 0; i < 4; i++) {
		MovePen(pos[i].getx1(), pos[i].gety1());
		DrawArc(r, 0, 360);
	}
}











void drawBound(SP *p, int ifErase) {
	double
		double v[4][2] = { { -PADDING, PADDING },{ PADDING, PADDING },{ -PADDING, -PADDING },
	{ PADDING, -PADDING } }
	int i;
	double matrix[DIMENTION][DIMENTION];
	double up[DIMENTION][DIMENTION], down[DIMENTION][DIMENTION];
	double mv[4][2] = { 0 };
	for (i = 0; i < 4; i++) {
		rotateVetor(v[i][0], p->absoluteAngle, v[i][1], mv[i], mv[i] + 1);
	}
	mp->x1 = p->x1 + mv[0][0];
	mp->x2 = p->x2 + mv[1][0];
	mp->x3 = p->x3 + mv[2][0];
	mp->x4 = p->x4 + mv[3][0];
	mp->y1 = p->y1 + mv[0][1];
	mp->y2 = p->y2 + mv[1][1];
	mp->y3 = p->y3 + mv[2][1];
	mp->y4 = p->y4 + mv[3][1];
	DrawRec(mp->x1, )
		p.absoluteAngle = p.absoluteAngle;
	p.type = 2;
	SetPenColor("GREY");
	DrawGraphic(p);
}
